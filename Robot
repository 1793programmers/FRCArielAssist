/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/
package edu.wpi.first.wpilibj.templates;


import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot implements RobotComponent {

    static final Joystick DRIVE_JOYSTICK = new Joystick(1);
    static final Joystick ARM_JOYSTICK = new Joystick(2);
    private DriveComponent driveComp = new DriveComponent();
    private GrabComponent grabComp = new GrabComponent();
    private LaunchComponent launchComp = new LaunchComponent();
    private LiftComponent liftComp = new LiftComponent();
    private CameraComponent cameraComp = new CameraComponent();
    private RobotComponent[] components = {driveComp, grabComp, launchComp, liftComp, cameraComp};

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void initialize() {
        for (int i = 0; i < components.length; i++) {
            components[i].initialize();
        }
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        for (int i = 0; i < components.length; i++) {
            components[i].autonomousPeriodic();
        }
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        for (int i = 0; i < components.length; i++) {
            components[i].teleopPeriodic();
        }
    }
    /**
     * This function is called periodically during test mode
     */
}
